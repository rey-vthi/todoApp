{"version":3,"sources":["components/InputBox.js","components/Delete.js","components/Todo.js","components/TodoTitle.js","components/todoAPI.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","useState","value","text","setText","className","onChange","event","txt","target","onKeyDown","keyCode","onEnter","Delete","onClick","remove","Todo","status","toggleStatus","removeTodo","todo","TodoTitle","isEditable","setEditable","toggleEditStatus","s","editableText","title","updateTitle","removeAllTodo","postReq","url","data","fetch","method","headers","body","JSON","stringify","then","res","json","todoId","TodoList","todoList","lastTaskId","allTodo","setTodoList","updateTodoList","todoApi","useEffect","allTodos","map","index","id","key","toggleTodoStatus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da5077ec.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst InputBox = function(props) {\n  const [text, setText] = useState(props.value);\n\n  const updateText = function(event) {\n    const txt = event.target.value;\n    setText(txt);\n  };\n\n  const addTodo = function(event) {\n    if (event.keyCode === 13 && text !== '') {\n      props.onEnter(text);\n      setText('');\n    }\n  };\n  return (\n    <input\n      className=\"todo-feeder\"\n      onChange={updateText}\n      onKeyDown={addTodo}\n      value={text}\n    ></input>\n  );\n};\n\nexport default InputBox;\n","import React from 'react';\n\nconst Delete = function(props) {\n  return (\n    <div className=\"remove\" onClick={props.remove}>\n      X\n    </div>\n  );\n};\n\nexport default Delete;\n","import React from 'react';\nimport Delete from './Delete';\n\nconst Todo = function(props) {\n  const {status, toggleStatus, removeTodo, todo} = props;\n  return (\n    <div className=\"todo\">\n      <div className={`task ${status}`} onClick={toggleStatus}>\n        {todo}\n      </div>\n      <Delete remove={removeTodo} />\n    </div>\n  );\n};\n\nexport default Todo;\n","import React, {useState} from 'react';\nimport InputBox from './InputBox';\nimport '../App.css';\nimport Delete from './Delete';\n\nconst TodoTitle = function(props) {\n  const [isEditable, setEditable] = useState(false);\n\n  const toggleEditStatus = function() {\n    setEditable(s => !s);\n  };\n\n  const updateNewTitle = function(title) {\n    props.updateTitle(title);\n    toggleEditStatus();\n  };\n\n  const editableText = (\n    <InputBox\n      className=\"todo-title\"\n      value={props.title}\n      onEnter={updateNewTitle}\n    />\n  );\n\n  const text = (\n    <div className=\"todo\">\n      <h2 className=\"todo-title\" onClick={toggleEditStatus}>\n        {props.title}\n      </h2>\n      <Delete remove={props.removeAllTodo} />\n    </div>\n  );\n\n  return <div>{isEditable ? editableText : text}</div>;\n};\n\nexport default TodoTitle;\n","const postReq = (url, data) => {\n  return fetch(url, {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(data)\n  });\n};\n\nconst getAllTodo = () => fetch('/api/getAllTodo').then(res => res.json());\n\nconst addTodo = todo => {\n  return postReq('/api/addTodo', {todo});\n};\n\nconst toggleTodoStatus = todoId => {\n  return postReq('/api/toggleTodoStatus', {todoId});\n};\n\nconst deleteTodo = todoId => {\n  return postReq('/api/deleteTodo', {todoId});\n};\n\nconst updateTitle = title => {\n  return postReq('/api/updateTitle', {title});\n};\n\nconst deleteAllTodo = () => postReq('/api/deleteAllTodo');\n\nexport default {\n  getAllTodo,\n  addTodo,\n  toggleTodoStatus,\n  deleteTodo,\n  updateTitle,\n  deleteAllTodo\n};\n","import React, {useState, useEffect} from 'react';\nimport InputBox from './InputBox';\nimport Todo from './Todo';\nimport '../App.css';\nimport TodoTitle from './TodoTitle';\nimport todoApi from './todoAPI';\n\nconst TodoList = function(props) {\n  const [allTodo, setTodoList] = useState({\n    title: '',\n    todoList: [],\n    lastTaskId: 0\n  });\n\n  const updateTodoList = () => todoApi.getAllTodo().then(setTodoList);\n  useEffect(() => {\n    updateTodoList();\n  }, []);\n\n  const updateTitle = function(title) {\n    todoApi.updateTitle(title).then(updateTodoList);\n  };\n\n  const deleteAllTodo = function() {\n    todoApi.deleteAllTodo().then(updateTodoList);\n  };\n\n  const addTodo = function(todo) {\n    todoApi.addTodo(todo).then(updateTodoList);\n  };\n\n  const toggleTodoStatus = function(id) {\n    todoApi.toggleTodoStatus(id).then(updateTodoList);\n  };\n\n  const removeTodo = function(id) {\n    todoApi.deleteTodo(id).then(updateTodoList);\n  };\n\n  const allTodos = allTodo.todoList.map(({status, todo, id}, index) => (\n    <Todo\n      status={status}\n      todo={todo}\n      key={index}\n      toggleStatus={() => toggleTodoStatus(id)}\n      removeTodo={() => removeTodo(id)}\n    />\n  ));\n\n  return (\n    <div className=\"container\">\n      <TodoTitle\n        title={allTodo.title}\n        updateTitle={updateTitle}\n        removeAllTodo={deleteAllTodo}\n      />\n      {allTodos}\n      <InputBox onEnter={addTodo} value=\"\" />\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport './App.css';\n\nfunction App() {\n  return <TodoList />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}